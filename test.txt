app.get('/api/dogs', async (req, res) => {
    try {
        const[rows] = await pool.query (`
        SELECT d.name AS dog_name, d.size, u.username AS owner_username
        FROM Dogs dog_name
        JOIN Users u ON d.owner_id = u.user_id
        `);
        res.json(rows);
    } catch (err) {
        res.status(500).json({ error: 'Failed to retrieve dogs' });
    }
});

app.get('/api/walkrequests/open', async (req, res) => {
    try {
        const [rows] = await poo.query(`
        SELECT wr.request_id, d.name AS dog_name, wr.requested_time, wr.duration_minutes, wr.location, u.username AS owner_username
        FROM WalkRequests wr
        JOIN Dogs d ON wr.dog_id = d.dog_id
        JOIN Users u ON d.owner_id = u.user_id
        WHERE wr.status = 'open'
        `);
        res.json(rows);
    } catch (err) {
        res.status(500).json({ error: 'Failed to retrieve open walk requests'});
    }
});

app.get('api/walkers/summary', async(req, res) => {
    try {
        const [rows] = await pool.query(`
        SELECT
        u.username AS walker_username,
        COUNT(r.rating_id) AS total_ratings,
        ROUND(AVG(r.rating), 1) AS average_rating,
        (
            SELECT COUNT(*)
            FROM WalkRequests wr
            JOIN WalkRatings wrat ON wr.request_id = wrat.request_id
            WHERE wrat.walker_id = u.user_id AND wr.status = 'completed'
        ) AS completed_walks
        FROM Users u
        LEFT JOIN WalkRatings r on r.walker_id = u.user_id
        WHERE u.role = 'walker'
        GROUP BY u.username
        )
    }
    }